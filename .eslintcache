[{"/Users/airportyh/Home/Playground/hooks-play/src/App.tsx":"1"},{"size":2248,"mtime":1611084892087,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1pxj3c5","/Users/airportyh/Home/Playground/hooks-play/src/App.tsx",["7"],"import './App.css';\nimport { useMemo, useState } from \"react\";\nimport _ from \"lodash\";\nimport UseStateExample from \"./ex/UseStateExample\";\nimport UseImperativeHandleExample from \"./ex/UseImperativeHandleExample\";\nimport WindowResizeExample from \"./ex/WindowResizeExample\";\nimport { FetchDataExample, FetchDataWithCleanUpExample, FetchDataWithRequestCancelationExample } from \"./ex/FetchDataExample\";\nimport { SimpleAutoFocusElementExample, FocusElementExample } from \"./ex/UseRefFocusElementExample\";\nimport { ObservableExample } from \"./ex/ObservableExample\";\nimport { UseContextExample } from \"./ex/UseContextExample\";\n\nconst options = [\n    { name: \"useState\", Component: UseStateExample },\n    { name: \"useEffect (Window Size)\", Component: WindowResizeExample },\n    { name: \"useImperativeHandle\", Component: UseImperativeHandleExample },\n    { name: \"Fetch Data Example\", Component: FetchDataExample },\n    { name: \"Fetch Data Example (with cleanup)\", Component: FetchDataWithCleanUpExample },\n    { name: \"Fetch Data Example (with request cancelation)\", Component: FetchDataWithRequestCancelationExample },\n    { name: \"Simple Auto Focus Example\", Component: SimpleAutoFocusElementExample },\n    { name: \"Focus Element Example\", Component: FocusElementExample },\n    { name: \"Observable Example\", Component: ObservableExample },\n    { name: \"useContext Example\", Component: UseContextExample }\n];\n\nfunction App() {\n    const [selection, setSelection] = useState<any>(options[0]);\n    const optionsByName = useMemo(() => _.keyBy(options, \"name\"), [options]);\n    \n    function onSelectionChange(evt: any) {\n        const selectedName = evt.target.value;\n        const selected = optionsByName[selectedName];\n        setSelection(selected);\n    }\n    return (\n        <div className=\"app\">\n            <div>\n                <select onChange={onSelectionChange}>\n                    { options.map((opt) => (\n                        <option key={opt.name} value={opt.name}>{opt.name}</option>\n                    )) }\n                </select>\n                <div style={{ paddingTop: 20 }}>\n                    { selection ? <selection.Component/> : null }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n",{"ruleId":"8","severity":1,"message":"9","line":27,"column":67,"nodeType":"10","endLine":27,"endColumn":76,"suggestions":"11"},"react-hooks/exhaustive-deps","React Hook useMemo has an unnecessary dependency: 'options'. Either exclude it or remove the dependency array. Outer scope values like 'options' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["12"],{"desc":"13","fix":"14"},"Update the dependencies array to be: []",{"range":"15","text":"16"},[1552,1561],"[]"]